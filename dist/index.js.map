{"mappings":"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","sources":["workspaces/indent-transformer/src/index.js"],"sourcesContent":["import { fileURLToPath } from 'url';\nimport fs from 'fs'\nimport stream from 'stream'\nimport debugFunc from 'debug'\nimport WrapLine from '@jaredpalmer/wrapline'\nconst debug = debugFunc('indent-transformer')\nconst trace = debugFunc('indent-transformer:trace')\nconst __filename = fileURLToPath(import.meta.url);\n\nlet lineNoAfter = false\n\nconst ltrim = function (str) {\n  return str.replace(/^\\s+/, '')\n}\n\nconst indentTransformer = {\n  encoding: 'utf-8',\n  flush(callback) {\n    while (1 < this.stack[0]) {\n      this.stack.shift()\n      if (lineNoAfter) {\n        this.push('DE99999 ');\n      }\n      else {\n        this.push('99999|DE ');\n      }\n    }\n    callback()\n  },\n  transform(chunk, enc, callback) {\n    this.stack = this.stack || [0]\n    let ret = []\n    chunk = chunk.toString()\n\n    const matches1 = chunk.matchAll(/.*\\n/g)\n\n    trace('matches1=' + matches1)\n    for (const match of matches1) {\n      const chunky = match[0].substring(0, match[0].length - 1)\n      trace('chunky=', chunky)\n      const indexOfPipe = chunky.indexOf('|')\n      trace('indexOfPipe=' + indexOfPipe)\n\n      const lineNo = chunky.substring(0, indexOfPipe)\n      trace('lineNo=' + lineNo)\n\n      let line = chunky.substring(indexOfPipe + 1)\n      trace('line=', line)\n\n      if (line.trim().length > 0) {\n        const matches = line.match(/(  |\\t)*/)\n        trace('matches=', matches)\n\n        if (matches) {\n          let numOfSpaces = matches[0].toString().length\n          trace('numOfSpaces=' + numOfSpaces + ', this.stack[0]=' + this.stack[0] + ', this.stack=', this.stack)\n\n          if (numOfSpaces > this.stack[0]) {\n            this.stack.unshift(numOfSpaces)\n            if (lineNoAfter) {\n              ret.push('IN' + lineNo + ' ' + ltrim(line))\n            }\n            else {\n              ret.push((lineNo.length ? lineNo + '|' : '') + 'IN' + ' ' + ltrim(line))\n            }\n          }\n          else if (numOfSpaces < this.stack[0]) {\n            trace('before shift: this.stack=', this.stack)\n            trace('numOfSpaces < this.stack[1]', numOfSpaces < this.stack[1])\n            while (numOfSpaces < this.stack[1]) {\n              trace('inside while loop')\n              this.stack.shift()\n              if (lineNoAfter) {\n                ret.push('DE' + lineNo + ' ')\n              }\n              else {\n                ret.push((lineNo.length ? lineNo + '|' : '') + 'DE')\n              }\n            }\n            trace('exited while loop')\n            this.stack.shift()\n            if (lineNoAfter) {\n              ret.push('DE' + lineNo + ' ' + ltrim(line))\n            }\n            else {\n              ret.push((lineNo.length ? lineNo + '|' : '') + 'DE' + ' ' + ltrim(line))\n            }\n            trace('after shift: this.stack=', this.stack)\n            trace('after shift: ret=', ret)\n          }\n          else {\n            if (lineNoAfter) {\n              ret.push('NO' + lineNo + ' ' + ltrim(line))\n            }\n            else {\n              ret.push((lineNo.length ? lineNo + '|' : '') + 'NO' + ' ' + ltrim(line))\n            }\n          }\n        }\n      }\n      if (this.ended) {\n        while (0 < this.stack[0]) {\n          trace('before shift: this.stack=', this.stack)\n          this.stack.shift()\n          trace('after shift: this.stack=', this.stack)\n          if (lineNoAfter) {\n            ret.push('DE' + lineNo + ' ');\n          }\n          else {\n            ret.push((lineNo.length ? lineNo + '|' : '') + 'DE');\n          }\n        }\n      }\n      debug('returning=' + ret.join(''))\n      let first = true;\n      ret.forEach(line => {\n        if (first) {\n          this.push(line)\n          first = false\n        }\n        else\n          this.push(line)\n      })\n      ret = []\n    }\n    callback();\n  }\n}\n\nif (process.argv[1] == __filename) {\n  const fileReader = fs.createReadStream(process.argv[2])\n  stream.finished(fileReader, (err) => {\n    if (err) {\n      console.error('Stream failed', err);\n    } else {\n      indentTransformer.ended = true\n    }\n  });\n\n  let outStream\n  if (process.argv[3] && process.argv[3] != '-') {\n    outStream = fs.createWriteStream(process.argv[3])\n    debug('outStream = file ' + process.argv[3])\n  }\n  else {\n    outStream = process.stdout\n    debug('outStream = process.stdout')\n  }\n\n  if (process.argv[4] && process.argv[4] == 'true') {\n    lineNoAfter = false\n  }\n  else {\n    lineNoAfter = true\n  }\n\n  fileReader\n    .pipe(WrapLine('|'))\n    .pipe(WrapLine(function (pre, line) {\n      // add 'line numbers' to each line\n      pre = pre || 0\n      return pre + 1\n    }))\n    .pipe(new stream.Transform(indentTransformer))\n    .pipe(outStream)\n}\n\nexport default (opts) => {\n  lineNoAfter = !Object.assign({}, opts).lineNoPrecedesIndent\n  return new stream.Transform(indentTransformer)\n}"],"names":["$51ea45d41b37ef59$var$debug","$b6SFi$debug","$51ea45d41b37ef59$var$trace","$51ea45d41b37ef59$var$__filename","$b6SFi$fileURLToPath","$51ea45d41b37ef59$var$lineNoAfter","$51ea45d41b37ef59$var$ltrim","str","replace","$51ea45d41b37ef59$var$indentTransformer","encoding","flush","callback","this","stack","shift","push","transform","chunk","enc","ret","matches1","toString","matchAll","match","chunky","substring","length","indexOfPipe","indexOf","lineNo","line1","trim","matches","numOfSpaces","unshift","ended","join","first","forEach","line","process","argv","fileReader","$b6SFi$fs","createReadStream","outStream","$b6SFi$stream","finished","err","console","error","createWriteStream","stdout","pipe","$b6SFi$jaredpalmerwrapline","pre","Transform","$51ea45d41b37ef59$export$2e2bcd8739ae039","opts","Object","assign","lineNoPrecedesIndent"],"version":3,"file":"index.js.map","sourceRoot":"../../../"}